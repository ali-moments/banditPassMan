#!/usr/bin/python3

import sqlite3
import argparse
import re
import os

class DB:
    def __init__(self, db_name=None):
        if db_name is None:
            # Use user's home directory for the database file to avoid permission issues
            home_dir = os.path.expanduser("~")
            db_name = os.path.join(home_dir, '.banditman_data.db')
        self.db_name = db_name
        self.conn = sqlite3.connect(self.db_name)
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS levels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL,
                secret TEXT,
                solve TEXT
            )
        ''')
        self.conn.commit()

    def save_level(self, username, password, secret, solve=''):
        self.cursor.execute('''
            INSERT INTO levels (username, password, secret, solve) VALUES (?, ?, ?, ?)
        ''', (username, password, secret, solve))
        self.conn.commit()

    def load_levels(self):
        self.cursor.execute('SELECT * FROM levels')
        return self.cursor.fetchall()

    def load_level_by_username(self, username):
        self.cursor.execute('SELECT * FROM levels WHERE username = ?', (username,))
        return self.cursor.fetchone()

    def load_last_level(self):
        self.cursor.execute('SELECT * FROM levels ORDER BY id DESC LIMIT 1')
        return self.cursor.fetchone()

    def update_level(self, username, password, secret, solve):
        self.cursor.execute('''
            UPDATE levels SET password = ?, secret = ?, solve = ? WHERE username = ?
        ''', (password, secret, solve, username))
        self.conn.commit()

    def get_next_username(self):
        self.cursor.execute("SELECT username FROM levels")
        usernames = [row[0] for row in self.cursor.fetchall()]
        max_num = -1
        for uname in usernames:
            m = re.match(r'bandit(\d+)$', uname)
            if m:
                num = int(m.group(1))
                if num > max_num:
                    max_num = num
        return f'bandit{max_num+1}'

    def close(self):
        self.conn.close()

def list_levels(db):
    levels = db.load_levels()
    if not levels:
        print("No levels found.")
        return
    # Print header
    print(f"{'Username':<10} {'Password':<20} {'Secret':<34} {'Solve'}")
    print("-" * 80)
    for level in levels:
        # level: (id, username, password, secret, solve)
        username = level[1]
        password = level[2]
        secret = level[3] if level[3] else ""
        solve = level[4] if level[4] else ""
        print(f"{username:<10} {password:<20} {secret:<34} {solve}")

def show_level(db, username=None):
    if username:
        level = db.load_level_by_username(username)
    else:
        level = db.load_last_level()
    if level:
        print(level)
    else:
        if username:
            print(f"No level found for username: {username}")
        else:
            print("No levels found.")

def show_ssh_command(db):
    next_username = db.get_next_username()
    m = re.match(r'bandit(\d+)$', next_username)
    if not m:
        print("No levels found or invalid username format.")
        return
    prev_num = int(m.group(1)) - 1
    if prev_num < 0:
        # First time: show bandit0 login
        print("level: bandit0")
        print("server: ssh bandit0@bandit.labs.overthewire.org -p 2220")
        print("password: bandit0")
        return
    prev_username = f'bandit{prev_num}'
    prev_level = db.load_level_by_username(prev_username)
    if not prev_level:
        print("Could not find required level information.")
        return
    print(f"level: {next_username}")
    print(f"server: ssh {next_username}@bandit.labs.overthewire.org -p 2220")
    print(f"password: {prev_level[3] if prev_level[3] else '(no secret set)'}")  # secret is 3rd index

def sanitize_input(s):
    # Remove leading/trailing whitespace, allow empty string for solve/secret
    if s is None:
        return ''
    return s.strip()

def add_level(db):
    username = db.get_next_username()
    print(f"Adding new level with username: {username}")
    m = re.match(r'bandit(\d+)$', username)
    if m and int(m.group(1)) == 0:
        # For bandit0, prompt for password
        while True:
            password = input("Enter password: ").strip()
            if not password:
                print("Password cannot be empty.")
            else:
                break
    else:
        # For banditN (N>0), use previous level's secret as password, show it in prompt
        prev_num = int(m.group(1)) - 1
        prev_username = f'bandit{prev_num}'
        prev_level = db.load_level_by_username(prev_username)
        if not prev_level:
            print(f"Previous level '{prev_username}' not found. Cannot add {username}.")
            return
        prev_secret = prev_level[3] if prev_level[3] else ''
        # Show previous secret as default password in prompt
        prompt = f"Enter password [{prev_secret}]: "
        password = input(prompt).strip()
        if not password:
            password = prev_secret
        print(f"Password for {username} will be set to: {password}")
    secret = sanitize_input(input("Enter secret: "))
    solve = sanitize_input(input("Enter solve: "))
    db.save_level(username, password, secret, solve)
    print(f"Level '{username}' added successfully.")
    show_ssh_command(db)  # Show next command after adding

def edit_level(db, username):
    level = db.load_level_by_username(username)
    if level:
        print(f"Editing level for username: {username}")
        while True:
            password = input("Enter new password: ").strip()
            if not password:
                print("Password cannot be empty.")
            else:
                break
        secret = sanitize_input(input("Enter new secret: "))
        solve = sanitize_input(input("Enter new solve: "))
        db.update_level(username, password, secret, solve)
        print("Level updated successfully.")
    else:
        print(f"No level found for username: {username}")

def main():
    parser = argparse.ArgumentParser(description="CLI-based BanditPassMan")
    parser.add_argument(
        "command",
        choices=["list", "l", "show", "s", "add", "a", "edit", "e", "next", "n"],
        help="Command to execute"
    )
    parser.add_argument("username", nargs="?", help="Username for show/edit commands")
    args = parser.parse_args()

    db = DB()

    try:
        if args.command in ("list", "l"):
            list_levels(db)
        elif args.command in ("show", "s"):
            # If username is not provided, show last saved level
            show_level(db, args.username)
        elif args.command in ("add", "a"):
            add_level(db)
        elif args.command in ("edit", "e"):
            if args.username:
                edit_level(db, args.username)
            else:
                print("Please provide a username for the 'edit' command.")
        elif args.command in ("next", "n"):
            show_ssh_command(db)
    finally:
        db.close()

if __name__ == "__main__":
    main()